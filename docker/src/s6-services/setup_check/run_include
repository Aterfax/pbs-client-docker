#!/usr/bin/with-contenv bash
# shellcheck shell=bash

# Read secrets from file. Allow override with ENV.
if [[ -n "$PBS_API_KEY_SECRET_FILE" && -z "$PBS_API_KEY_SECRET" ]]; then
    if [ -f "${PBS_API_KEY_SECRET_FILE}" ]; then
        PBS_PASSWORD=$(cat "${PBS_API_KEY_SECRET_FILE}")
    else
        echo "WARNING: PBS_API_KEY_SECRET_FILE is set but the file \"${PBS_API_KEY_SECRET_FILE}\" does not exist"
    fi
fi

if [[ -n "$PBS_PASSWORD_FILE" && -z "$PBS_PASSWORD" ]]; then
    if [ -f "${PBS_PASSWORD_FILE}" ]; then
        PBS_PASSWORD=$(cat "${PBS_PASSWORD_FILE}")
    else
        echo "WARNING: PBS_PASSWORD_FILE is set but the file \"${PBS_PASSWORD_FILE}\" does not exist"
    fi
fi

# If an API key is set we should use it over any password / username.
if [ -n "$PBS_API_KEY_SECRET" ]; then
    PBS_PASSWORD="${PBS_API_KEY_SECRET}"
fi

if [ -n "$PBS_API_KEY_NAME" ]; then
    PBS_USER="${PBS_API_KEY_NAME}"
fi

if [ -z "$PBS_USER" ]; then
    echo "Error: PBS_USER is not set. This variable is required, please ensure it is set, or set PBS_API_KEY_NAME."
    exit 1
fi

if [ -z "$PBS_ENDPOINT" ]; then
    echo "Error: PBS_ENDPOINT is not set. This variable is required, please ensure it is set."
    exit 1
fi

if [ -z "$PBS_DATASTORE" ]; then
    echo "Error: PBS_DATASTORE is not set. This variable is required, please ensure it is set."
    exit 1
fi

if [ -z "$PBS_PASSWORD" ]; then
    echo "Error: PBS_PASSWORD is not set. This variable is required, please ensure it is set, or set one of PBS_API_KEY_SECRET | PBS_PASSWORD_FILE | PBS_API_KEY_SECRET_FILE."
    exit 1
fi

# Evaluate each subvariable and replace all spaces with nothing - if not zero length set variable.
if [[ ! -z "${HEALTHCHECKSHOSTNAME// }" ]] && [[ ! -z "${HEALTHCHECKSUUID// }" ]]; then
  HEALTHCHECKSURL="${HEALTHCHECKSHOSTNAME}/ping/${HEALTHCHECKSUUID}"
  export HEALTHCHECKSURL="${HEALTHCHECKSURL}"
fi

export PBS_PASSWORD="${PBS_PASSWORD}"
export PBS_REPOSITORY="${PBS_USER}@${PBS_ENDPOINT}:${PBS_DATASTORE}"
