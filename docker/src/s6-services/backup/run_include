#!/usr/bin/with-contenv bash
# shellcheck shell=bash
path_to_filename() {
    local path="$1"
    local path_no_trailing_slash="${path%/}"  # Remove the trailing slash, if any
    local path_no_first_slash="${path_no_trailing_slash#\/}"  # Remove the first slash
    local filename="${path_no_first_slash//\//-}"  # Replace slashes with dashes
    echo "${filename}"
}

lastrunfile="/tmp/pbs_client_lastrun"

BACKUP_DIRECTORIES=()
# Iterate over each subdirectory under /backup and add its full path to the array
for dir in /backups/*; do
    if [[ -d "$dir" ]]; then
        BACKUP_DIRECTORIES+=("$dir/")
    fi
done

# Print the contents of the array if this is first run only.
if [ ! -e "${lastrunfile}" ]; then
    echo "## Detected backup directories:"
    echo -e "#"
    if [ ${#BACKUP_DIRECTORIES[@]} -eq 0 ]; then
        echo "# Nothing to backup."
    else
        for path in "${BACKUP_DIRECTORIES[@]}"; do
            echo -e "# $path"
        done
        echo -e "#\n"
    fi
fi

# Construct the directory target list with the proxmox-backup-client syntax.
# This makes 1 .pxar file per path.
TARGETS=""
for dir in "${BACKUP_DIRECTORIES[@]}"; do
    TARGET=$(path_to_filename "$dir").pxar:$dir
    TARGETS="${TARGETS} ${TARGET}"
done

# Build the backup command we want to execute. 
BACKUPCMD="proxmox-backup-client backup ${TARGETS}"

if [ -n "$PBS_DATASTORE_NS" ]; then
    BACKUPCMD+=" --ns ${PBS_DATASTORE_NS}"
fi

if [ -n "$PBS_COMMAND_OPTS" ]; then
    BACKUPCMD+=" $PBS_COMMAND_OPTS"
fi

# Source the variables from the setup_check scripting include file.
source /etc/s6-overlay/s6-rc.d/setup_check/run_include

# Print out the repository and backup command on first run only.
if [ ! -e "${lastrunfile}" ]; then
    echo -e "## Backing up to repository: \n# ${PBS_REPOSITORY}\n"
    echo -e "## Executing backup command: \n# ${BACKUPCMD}\n"
fi

# Note the first evaluation is key and will initiate backup if the user opts
# to allow the first backup or we're
if [ "$CRON_BACKUP_ONLY" = "0" ] || [ -e "${lastrunfile}" ]; then
    if [ -n "$HEALTHCHECKSURL" ]; then
        curl -fsS -m 10 --retry 5 -o /dev/null $HEALTHCHECKSURL/start
    fi

    # Run the actual backup command.
    ${BACKUPCMD} 2>&1
    BACKUP_EXIT_CODE=$?

    # First run touches the file. Backups will set the date.
    echo "$(date +"%Y-%m-%d %H:%M:%S")" > "${lastrunfile}"

    if [ -n "$HEALTHCHECKSURL" ]; then
        # We pipe the exit code to healthchecks, if it isn't zero, a warning will fire.
        curl -fsS -m 10 --retry 5 -o /dev/null ${HEALTHCHECKSURL}/${BACKUP_EXIT_CODE}
    fi
elif [ "$CRON_BACKUP_ONLY" = "1" ]; then
    echo "CRON_BACKUP_ONLY=1, skipping container start up initial backup."
elif [ "$CRON_BACKUP_ONLY" != "0" ] && [ "$CRON_BACKUP_ONLY" != "1" ]; then 
    echo "CRON_BACKUP_ONLY set to invalid value, skipping container start up initial backup."
fi

# Set this so backups always happen after the first run via CRON given logic above.
# The date may also be useful for something like a health check if I write it...
# First run touches the file. Backups will set the date.
touch "${lastrunfile}"
